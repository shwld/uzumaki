// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String @id @default(uuid())
  uid            String  @unique
  email          String  @unique
  name           String
  avatarImageUrl String
  stories             Story[]
  accountMemberships            AccountMembership[]
  unaccountedProjects            ProjectMembership[]
  storyActivities     StoryActivity[]
  createdAccounts  Account[]
  createdProjects  Project[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Account {
  id             String @id @default(uuid())
  name           String
  projects       Project[]
  accountMemberships        AccountMembership[]
  createdBy      User?     @relation(fields: [createdById], references: [id])
  createdById    String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model AccountMembership {
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  account Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId String
  role AccountRole

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@id([userId, accountId])
}

model Project {
  id             String @id @default(uuid())
  name           String
  privacy        ProjectPrivacy
  description    String
  accountId      String
  account        Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  stories        Story[]
  storyOrderPriorities StoryOrderPriority[]
  unaccountedMembers        ProjectMembership[]
  createdBy      User?     @relation(fields: [createdById], references: [id])
  createdById    String?
  invitations    ProjectMemberInvitation[]
  boardConfig    ProjectBoardConfig @relation(fields: [boardConfigId], references: [id])
  boardConfigId  String @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model ProjectBoardConfig {
  id               String @id @default(uuid())
  initialVelocity  Int @default(10)
  startOn          DateTime?
  startIterationOn DayOfWeek @default(MONDAY)
  iterationLength  Int @default(2)
  project          Project?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model ProjectMembership {
  id         String @id @default(uuid())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  role ProjectMemberRole
  requestedStories Story[] @relation("RequestedStories")

  invitations    ProjectMemberInvitation[]

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([userId, projectId])
}

model ProjectMemberInvitation {
  id         String @id @default(uuid())
  membership ProjectMembership? @relation(fields: [membershipId], references: [id], onDelete: SetNull)
  membershipId String?
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  role ProjectMemberRole
  email     String

  confirmationTokens        ProjectMemberInvitationToken[]

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([membershipId, projectId])
}

model ProjectMemberInvitationToken {
  id         String @id @default(uuid())
  invitation     ProjectMemberInvitation @relation(fields: [invitationId], references: [id], onDelete: Cascade)
  invitationId   String
  expiredAt      DateTime

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Story {
  id         String @id @default(uuid())
  title      String
  description       String
  state      StoryState
  kind       StoryKind @default(FEATURE)
  points     Int?
  requesterId   String
  requester   ProjectMembership @relation("RequestedStories", fields: [requesterId], references: [id])
  releaseDate DateTime?
  projectId   String
  project     Project?   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  owners        User[]
  storyOrderPriority   StoryOrderPriority?
  labels        Label[]
  activities  StoryActivity[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  completedAt    DateTime?

  @@index([completedAt])
}

model StoryOrderPriority {
  projectId  String
  project    Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  storyId    String
  story      Story   @relation(fields: [storyId], references: [id], onDelete: Cascade)
  position    StoryPosition @default(ICEBOX)
  priority      Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  @@id([storyId])
  @@index([projectId, position, priority])
}

model Label {
  id         String @id @default(uuid())
  name       String
  color      String
  stories    Story[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model StoryActivity {
  id         String @id @default(uuid())
  storyId    String
  story     Story   @relation(fields: [storyId], references: [id], onDelete: Cascade)
  userId     String
  user       User   @relation(fields: [userId], references: [id])
  content    String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

enum AccountRole {
  OWNER
  MEMBER
  VIEWER
}

enum ProjectPrivacy {
  PRIVATE
  PUBLIC
}

enum ProjectMemberRole {
  OWNER
  VIEWER
  MEMBER
}

enum StoryPosition {
  DONE
  CURRENT
  BACKLOG
  ICEBOX
}

enum StoryState {
  UNSTARTED
  STARTED
  FINISHED
  DELIVERED
  REJECTED
  ACCEPTED
}

enum StoryKind {
  FEATURE
  BUG
  CHORE
  RELEASE
}

enum DayOfWeek {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}